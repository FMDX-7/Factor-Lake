name: Security Scanning

on:
  push:
    branches:
      - "*"  # Trigger on push to any branch
  pull_request:
    branches:
      - "*"  # Trigger on pull requests to any branch
  schedule:
    - cron: '26 22 * * 2'  # Run every Tuesday at 22:26 UTC

jobs:
  security_scanning:
    permissions:
      contents: read
      security-events: write
      actions: read

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      # Install Bandit
      - name: Install Bandit
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade bandit

      # Run Bandit Scan over the entire repository
      - name: Bandit Scan on Entire Codebase
        run: |
          mkdir -p scan-results
          bandit -r . -f json -o scan-results/bandit-results.json || true

      # Run Bandit Scan on bad_code.py file (expect failure but don't fail workflow)
      - name: Bandit Scan on bad_code.py (expected failure)
        continue-on-error: true
        run: |
          echo "⚠️ Scanning known-bad test file (UnitTests/bad_code.py)..."
          bandit UnitTests/bad_code.py -f json -o scan-results/bandit-bad-code-results.json || true

      # Print Bandit SARIF for bad_code.py
      - name: Print Bandit SARIF for bad_code.py
        run: |
          echo "Dumping SARIF results for inspection:"
          cat scan-results/bandit-bad-code-results.sarif || echo "❌ SARIF not found!"

      # Print issues found in bad_code.py
      - name: Print issues found in bad_code.py
        run: |
          echo "🔎 Checking for Bandit issues in bad_code.py..."
          if jq '.results | length > 0' scan-results/bandit-bad-code-results.json | grep -q 'true'; then
            echo "❗ Issues found in bad_code.py:"
            jq '.results[] | {issue: .issue_text, line: .line_number, test_id: .test_id}' scan-results/bandit-bad-code-results.json
          else
            echo "✅ No issues found in bad_code.py (unexpected)"
          fi

      # Convert Bandit JSON to SARIF
      - name: Convert Bandit JSON to SARIF
        run: |
          python scripts/bandit_to_sarif.py scan-results/bandit-results.json scan-results/bandit-results.sarif
          python scripts/bandit_to_sarif.py scan-results/bandit-bad-code-results.json scan-results/bandit-bad-code-results.sarif || true

      # Check if any issues were detected outside of bad_code.py
      - name: Check for issues outside of bad_code.py
        run: |
          echo "Checking for issues outside bad_code.py..."
          if [ -f scan-results/bandit-results.sarif ] && grep -q '"ruleId"' scan-results/bandit-results.sarif && ! grep -q "UnitTests/bad_code.py" scan-results/bandit-results.sarif; then
            echo "❌ Security issues detected outside of bad_code.py. Failing the workflow."
            exit 1
          fi
          echo "✅ No security issues found outside of bad_code.py."

      # Install Safety
      - name: Install Safety
        run: |
          python -m pip install --upgrade pip
          python -m pip install safety

      # Create output directory for Safety results
      - name: Create output directory
        run: |
          mkdir -p ./scan-results
          chmod -R 755 ./scan-results

      # Run Safety Scan and save to JSON
      - name: Run Safety Scan
        run: |
          echo "Starting Safety scan..."
          safety scan --debug --json --stage production --output json > ./scan-results/safety_output.json 2>&1 || true
          echo "Safety scan complete."
          cat ./scan-results/safety_output.json
        env:
          SAFETY_API_KEY: ${{ secrets.SAFETY_API_KEY }}
          SAFETY_STAGE: production

      # List scan-results directory to check output
      - name: List scan-results directory
        run: |
          echo "Listing contents of ./scan-results:"
          ls -l ./scan-results || echo "No files found in ./scan-results"

      # Check if vulnerabilities exist in the Safety JSON
      - name: Check if vulnerabilities exist in Safety JSON
        id: check_vulns
        run: |
          echo "Checking vulnerabilities in safety_output.json"

          # Debugging: Print the entire Safety JSON file for inspection
          cat ./scan-results/safety_output.json

          # Run jq to check for vulnerabilities and print out what is found
          jq -r '.scan_results.projects[].files[].results.dependencies[]? | select(.vulnerabilities.known_vulnerabilities | length > 0) | .name + " has vulnerabilities: " + (.vulnerabilities.known_vulnerabilities[]? | "- CVE: \(.id), Spec: \(.vulnerable_spec), Description: \(.description // "No description available")")' ./scan-results/safety_output.json || echo "No vulnerabilities found."

          # If vulnerabilities found, set environment variable to true
          if jq '.scan_results.projects[].files[].results.dependencies[]? | select(.vulnerabilities.known_vulnerabilities | length > 0)' ./scan-results/safety_output.json; then
            echo "Vulnerabilities found."
            echo "Vulnerabilities_found=true" >> $GITHUB_ENV
          else
            echo "No vulnerabilities found."
            echo "Vulnerabilities_found=false" >> $GITHUB_ENV
          fi
        continue-on-error: true

      # Convert Safety results to SARIF (only if vulnerabilities found)
      - name: Convert Safety results to SARIF
        if: ${{ env.Vulnerabilities_found == 'true' }}
        run: |
          echo "Converting safety_output.json to SARIF"
          python scripts/convert_safety_to_sarif.py ./scan-results/safety_output.json ./scan-results/safety_output.sarif requirements.txt || echo "SARIF conversion failed"
          echo "Conversion complete."

      # Ensure SARIF file exists before uploading
      - name: Check if SARIF file exists
        id: check_sarif_file
        run: |
          if [ -f ./scan-results/safety_output.sarif ]; then
            echo "SARIF file exists, proceeding with upload."
            echo "sarif_file_exists=true" >> $GITHUB_ENV
          else
            echo "SARIF file does not exist."
            echo "sarif_file_exists=false" >> $GITHUB_ENV
          fi
        continue-on-error: true

      # Upload Safety SARIF results to GitHub Code Scanning (only if SARIF file exists)
      - name: Upload Safety results to code scanning alerts
        if: ${{ env.sarif_file_exists == 'true' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ./scan-results/safety_output.sarif
          token: ${{ secrets.GITHUB_TOKEN }}
          wait-for-processing: true

      # Warn if vulns were found (based on first check)
      - name: Warning if Safety vulnerabilities were found (with details)
        if: steps.check_vulns_1.outputs.found == 'true'
        run: |
          echo "❌ Vulnerabilities found in requirements.txt:"
          jq -r '
            .scan_results.projects[].files[].results.dependencies[]?
            | select(.specifications[].vulnerabilities.known_vulnerabilities | length > 0)
            | "\(.name)==\(.specifications[0].raw):\n" +
              (.specifications[].vulnerabilities.known_vulnerabilities[]? |
                "- CVE: \(.id)\n   Spec: \(.vulnerable_spec)\n   Description: \(.description // "No description available")\n"
              )
          ' ./scan-results/safety_output.json || echo "⚠️ Could not parse Safety results."
      
          echo "⚠️ Vulnerabilities found, but workflow will continue."

      # Print message if no vulnerabilities found
      - name: No vulnerabilities found, skipping conversion
        if: ${{ env.Vulnerabilities_found == 'false' }}
        run: echo "No vulnerabilities were found, skipping SARIF conversion."

      # Summarize results to GitHub on Pull Request
      - name: Post PR comment with security summary
        if: github.event_name == 'pull_request'
        run: |
          echo "📋 Generating security scan summary..."
          
          echo "### 🔒 Security Scan Results" > pr_comment.md
          
          echo "**Bandit Scan:**" >> pr_comment.md
          if jq '.results | length > 0' scan-results/bandit-results.json | grep -q 'true'; then
            echo "- ❗ Issues found by Bandit" >> pr_comment.md
          else
            echo "- ✅ No issues found by Bandit" >> pr_comment.md
          fi
          
          echo "" >> pr_comment.md
          echo "**Safety Scan:**" >> pr_comment.md
          if grep -q '"known_vulnerabilities":' scan-results/safety_output.json; then
            echo "- ❗ Vulnerabilities found in dependencies" >> pr_comment.md
          else
            echo "- ✅ No known vulnerabilities in dependencies" >> pr_comment.md
          fi
          
          echo "" >> pr_comment.md
          echo "_This comment was generated automatically by the security scan workflow._" >> pr_comment.md
          
          cat pr_comment.md
          
          # Install GitHub CLI and post the comment
          echo "🔧 Installing GitHub CLI..."
          sudo apt-get update
          sudo apt-get install -y gh
          
          echo "💬 Posting comment to PR #${{ github.event.pull_request.number }}"
          gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
          gh pr comment ${{ github.event.pull_request.number }} --body-file pr_comment.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}