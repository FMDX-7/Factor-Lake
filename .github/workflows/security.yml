name: Security Scanning

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]
  schedule:
    - cron: '26 22 * * 2'

jobs:
  security_scanning:
    permissions:
      contents: read
      security-events: write
      actions: read

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      # Install Bandit
      - name: Install Bandit
        run: |
          python -m pip install --upgrade pip
          pip install bandit

      # Run Bandit on the entire codebase and output SARIF
      - name: Run Bandit Scan on the entire codebase
        run: |
          mkdir -p scan-results
          bandit -r . -f sarif -o scan-results/bandit-results.sarif || true

      # Run Bandit on the known bad test file (expect failure, but don't fail the workflow)
      - name: Run Bandit Scan on bad test file (expect failure)
        continue-on-error: true
        run: |
          echo "⚠️ Scanning known-bad test file (UnitTests/bad_code.py)..."
          bandit UnitTests/bad_code.py -f sarif -o scan-results/bandit-bad-code-results.sarif || true

      # Check if Bandit detected any issues outside bad_code.py (fail workflow if found)
      - name: Check if Bandit detected issues outside bad_code.py
        id: check_bandit_results
        run: |
          # Check if any issues were detected in the main codebase scan (excluding bad_code.py)
          if grep -q "issue" scan-results/bandit-results.sarif && ! grep -q "UnitTests/bad_code.py" scan-results/bandit-results.sarif; then
            echo "❌ Security issues detected outside of bad_code.py. Failing the workflow."
            exit 1
          fi
          echo "✅ No security issues found outside of bad_code.py."

      # Check if Bandit SARIF file exists and report results
      - name: Check if Bandit SARIF file exists
        id: check_bandit_sarif_file
        run: |
          if [ -f scan-results/bandit-results.sarif ]; then
            echo "Bandit SARIF exists for the codebase."
            echo "bandit_sarif_exists=true" >> $GITHUB_ENV
          else
            echo "Bandit SARIF does not exist."
            echo "bandit_sarif_exists=false" >> $GITHUB_ENV
          fi

      # (Optional) Print Bandit SARIF for debugging
      - name: Print Bandit SARIF (debug)
        if: ${{ env.bandit_sarif_exists == 'true' }}
        run: cat scan-results/bandit-results.sarif

      # Upload Bandit SARIF results to Code Scanning
      - name: Upload Bandit SARIF to Code Scanning
        if: ${{ env.bandit_sarif_exists == 'true' }}
        uses: github/codeql-action/upload-sarif@main
        with:
          sarif_file: scan-results/bandit-results.sarif
          token: ${{ secrets.GITHUB_TOKEN }}
          wait-for-processing: true

      # Install Safety
      - name: Install Safety
        run: |
          python -m pip install safety

      # Create output directory
      - name: Create output directory
        run: |
          mkdir -p ./scan-results
          chmod -R 755 ./scan-results

      # Run Safety scan
      - name: Run safety scan
        run: |
          echo "Starting Safety scan..."
          safety scan --debug --json --stage production --output json > ./scan-results/safety_output.json 2>&1 || true
          echo "Safety scan complete."
          cat ./scan-results/safety_output.json
        env:
          SAFETY_API_KEY: ${{ secrets.SAFETY_API_KEY }}
          SAFETY_STAGE: production

      # Check if issues exist in Safety JSON
      - name: Check if vulnerabilities exist in the Safety JSON
        id: check_vulns
        run: |
          if jq '.scan_results.projects[].files[].results.dependencies[]? | select(.vulnerabilities.known_vulnerabilities | length > 0)' ./scan-results/safety_output.json; then
            echo "Vulnerabilities found."
            echo "Vulnerabilities_found=true" >> $GITHUB_ENV
          else
            echo "No vulnerabilities found."
            echo "Vulnerabilities_found=false" >> $GITHUB_ENV
          fi
        continue-on-error: true

      # List scan-results directory
      - name: List scan-results directory
        run: |
          echo "Listing contents of ./scan-results:"
          ls -l ./scan-results || echo "No files found in ./scan-results"

      # Convert Safety output to SARIF
      - name: Convert safety results to SARIF
        if: ${{ env.Vulnerabilities_found == 'true' }}
        run: |
          echo "Converting safety_output.json to SARIF"
          python scripts/convert_safety_to_sarif.py ./scan-results/safety_output.json ./scan-results/safety_output.sarif requirements.txt || echo "SARIF conversion failed"
          echo "Conversion complete."

      # Check if SARIF file was created
      - name: Check if SARIF file was created
        run: |
          echo "Checking for SARIF file..."
          if [ -f ./scan-results/safety_output.sarif ]; then
            echo "SARIF file found."
            cat ./scan-results/safety_output.sarif
          else
            echo "SARIF file not found."
          fi

      # Confirm SARIF exists
      - name: Check if SARIF file exists
        id: check_sarif_file
        run: |
          if [ -f ./scan-results/safety_output.sarif ]; then
            echo "SARIF file exists, proceeding with upload."
            echo "sarif_file_exists=true" >> $GITHUB_ENV
          else
            echo "SARIF file does not exist."
            echo "sarif_file_exists=false" >> $GITHUB_ENV
          fi
        continue-on-error: true

      # Upload Safety SARIF
      - name: Upload safety results to code scanning alerts
        if: ${{ env.sarif_file_exists == 'true' }}
        uses: github/codeql-action/upload-sarif@main
        with:
          sarif_file: ./scan-results/safety_output.sarif
          token: ${{ secrets.GITHUB_TOKEN }}
          wait-for-processing: true

      # Print message if no vulnerabilities found
      - name: No vulnerabilities found, skipping conversion
        if: ${{ env.Vulnerabilities_found == 'false' }}
        run: echo "No vulnerabilities were found, skipping SARIF conversion."