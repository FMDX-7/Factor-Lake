name: Security Scanning

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]
  schedule:
    - cron: '26 22 * * 2'  # Weekly schedule

jobs:
  security_scanning:
    permissions:
      contents: read
      security-events: write
      actions: read

    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - uses: actions/checkout@v2

      # Install dependencies
      - name: Install Bandit and Safety
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      # Run Bandit Scans
      - name: Run Bandit Scans
        run: |
          mkdir -p scan-results
          bandit -r . -f json -o scan-results/bandit-results.json || true
          bandit UnitTests/bad_code.py -f json -o scan-results/bandit-bad-code-results.json || true

      # Convert Bandit JSON to SARIF (for both scans)
      - name: Convert Bandit JSON to SARIF
        run: |
          python scripts/bandit_to_sarif.py scan-results/bandit-results.json scan-results/bandit-results.sarif
          python scripts/bandit_to_sarif.py scan-results/bandit-bad-code-results.json scan-results/bandit-bad-code-results.sarif || true

      # Print issues from bad_code.py scan results
      - name: Check for Issues in bad_code.py
        run: |
          echo "Checking for Bandit issues in bad_code.py..."
          jq '.results | length > 0' scan-results/bandit-bad-code-results.json | grep -q 'true' && echo "❗ Issues found" || echo "✅ No issues found"

      # Check if issues exist outside of bad_code.py (and fail if found)
      - name: Check for issues outside of bad_code.py
        run: |
          if grep -q '"ruleId"' scan-results/bandit-results.sarif && ! grep -q "UnitTests/bad_code.py" scan-results/bandit-results.sarif; then
            echo "❌ Issues detected outside bad_code.py"
            exit 1
          fi
          echo "✅ No issues outside bad_code.py"

      # Run Safety scan and convert to SARIF
      # Run Safety Scan and save to JSON
      - name: Run Safety Scan
        run: |
          echo "Starting Safety scan..."
          safety scan --debug --json --stage production --output json > ./scan-results/safety_output.json 2>&1 || true
          echo "Safety scan complete."
          cat ./scan-results/safety_output.json
        env:
          SAFETY_API_KEY: ${{ secrets.SAFETY_API_KEY }}
          SAFETY_STAGE: production

      # Convert Safety to SARIF if vulnerabilities are found
      - name: Convert Safety to SARIF
        if: ${{ env.Vulnerabilities_found == 'true' }}
        run: |
          python scripts/convert_safety_to_sarif.py ./scan-results/safety_output.json ./scan-results/safety_output.sarif requirements.txt

      # Ensure SARIF file exists before upload
      - name: Check if Safety SARIF file exists
        id: check_sarif_file
        run: |
          if [ -f ./scan-results/safety_output.sarif ]; then
            echo "SARIF file exists, proceeding with upload."
            echo "sarif_file_exists=true" >> $GITHUB_ENV
          else
            echo "SARIF file does not exist."
            echo "sarif_file_exists=false" >> $GITHUB_ENV
          fi

      # Upload Safety SARIF results to GitHub Code Scanning
      - name: Upload Safety results to code scanning alerts
        if: ${{ env.sarif_file_exists == 'true' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ./scan-results/safety_output.sarif
          token: ${{ secrets.GITHUB_TOKEN }}
          wait-for-processing: true

      # Fail workflow on Safety vulnerabilities (with details)
      - name: Fail workflow on Safety vulnerabilities (with details)
        if: ${{ env.Vulnerabilities_found == 'true' }}
        run: |
          echo "❌ Vulnerabilities found in requirements.txt:"
      
          # Use jq to extract and format the vulnerable package information with CVE and description
          jq -r '
            .scan_results.projects[].files[].results.dependencies[]?
            | select(.specifications[].vulnerabilities.known_vulnerabilities | length > 0)
            | "\(.name)==\(.specifications[0].raw):\n" +
              (.specifications[].vulnerabilities.known_vulnerabilities[]? |
                "- CVE: \(.id)\n   Spec: \(.vulnerable_spec)\n   Description: \(.description // "No description available")\n"
              )
          ' ./scan-results/safety_output.json || echo "⚠️ Could not parse Safety results."
      
          # Fail the build if any vulnerabilities are detected
          echo "🚨 Workflow failed, vulnerable package detected!"
          exit 1

      # No vulnerabilities found
      - name: No vulnerabilities found, skipping conversion
        if: ${{ env.Vulnerabilities_found == 'false' }}
        run: echo "No vulnerabilities found, skipping SARIF conversion"
